
#include <iostream>
#include <vector>
#include <random>
#include <ctime>
#include <SFML/Graphics.hpp>

class ColorGame {
private:
    sf::RenderWindow window;
    std::vector<sf::Color> shades;
    sf::Color targetColor;
    std::vector<sf::RectangleShape> colorBoxes;
    int score = 0;
    sf::Font font;
    sf::Text scoreText;
    sf::Text instructionText;

    sf::Color generatePinkShade() {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> dis(150, 255);
        return sf::Color(255, dis(gen), dis(gen));
    }

    void initializeGame() {
        if (!font.loadFromFile("arial.ttf")) {
            std::cout << "Error loading font" << std::endl;
        }

        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(sf::Color::Black);
        scoreText.setPosition(10, 10);

        instructionText.setFont(font);
        instructionText.setCharacterSize(20);
        instructionText.setFillColor(sf::Color::Black);
        instructionText.setString("Click on the shade that's different!");
        instructionText.setPosition(10, 40);

        generateNewRound();
    }

    void generateNewRound() {
        shades.clear();
        colorBoxes.clear();

        // Generate base pink shade
        sf::Color baseShade = generatePinkShade();
        
        // Generate slightly different shade for target
        targetColor = baseShade;
        targetColor.r = std::min(255, targetColor.r + 20);
        
        // Create color boxes
        int correctBox = rand() % 4;
        float boxSize = 100.f;
        float spacing = 20.f;
        float startX = (800 - (4 * boxSize + 3 * spacing)) / 2;
        float startY = 300.f;

        for (int i = 0; i < 4; i++) {
            sf::RectangleShape box(sf::Vector2f(boxSize, boxSize));
            box.setPosition(startX + i * (boxSize + spacing), startY);
            box.setFillColor(i == correctBox ? targetColor : baseShade);
            colorBoxes.push_back(box);
        }
    }

public:
    ColorGame() : window(sf::VideoMode(800, 600), "Pink Shade Game") {
        srand(time(0));
        window.setFramerateLimit(60);
        initializeGame();
    }

    void run() {
        while (window.isOpen()) {
            sf::Event event;
            while (window.pollEvent(event)) {
                if (event.type == sf::Event::Closed)
                    window.close();

                if (event.type == sf::Event::MouseButtonPressed) {
                    sf::Vector2i mousePos = sf::Mouse::getPosition(window);
                    for (size_t i = 0; i < colorBoxes.size(); i++) {
                        if (colorBoxes[i].getGlobalBounds().contains(mousePos.x, mousePos.y)) {
                            if (colorBoxes[i].getFillColor() == targetColor) {
                                score++;
                                generateNewRound();
                            } else {
                                score = std::max(0, score - 1);
                            }
                        }
                    }
                }
            }

            scoreText.setString("Score: " + std::to_string(score));

            window.clear(sf::Color::White);
            for (const auto& box : colorBoxes) {
                window.draw(box);
            }
            window.draw(scoreText);
            window.draw(instructionText);
            window.display();
        }
    }
};

int main() {
    ColorGame game;
    game.run();
    return 0;
}
